<?php

/**
 * Implementation of hook_menu()
 *
 */
function statsd_menu() {

  $items['admin/settings/logging/statsd'] = array(
    'title'            => 'StatsD',
    'description'      => 'Settings for statsd logging. StatsD is a Node JS daemon that aggregates statistics for visibility in Graphite. Best suited for compiling arbitrary statistics on various developer implemented metrics, this module can also be used to send all system events (via watchdog calls) to Graphite.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('statsd_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;

}


/**
 * Page callback for StatsD administrative settings.
 *
 */
function statsd_admin_settings() {

  $form['statsd_host'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Host'),
    '#size'          => 25,
    '#description'   => t('The hostname, or IP address of the StatsD daemon. To minimize latency issue, use an IP whenever possible.'),
    '#default_value' => variable_get('statsd_host', '127.0.0.1'),
  );
  $form['statsd_port'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Port'),
    '#size'          => 5,
    '#description'   => t('The port of the StatsD daemon'),
    '#default_value' => variable_get('statsd_port', '8125'),
  );
  $form['statsd_sample_rate'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Sample Rate'),
    '#size'          => 2,
    '#description'   => t('StatsD can send a subset of events to Graphite. Choose a lower sample rate if you want to reduce the number of events being sent. Sample rates are between 0 and 1 (e.g. 0.1 implies 10% of events will be logged)'),
    '#default_value' => variable_get('statsd_sample_rate', 1),
  );
  $form['statsd_watchdog'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Use Watchdog'),
    '#description'   => t('Enabling this feature will capture a count of the severity and type of errors passed through watchdog. Alternatively, it may be less spammy to use the built-in StatsD client to only record events your application cares about. With high traffic sites, it will likely be better to run a separate process to analyze log data, rather than using this feature.'),
    '#default_value' => variable_get('statsd_watchdog', TRUE),
  );
  $form['statsd_prefix'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Prefix'),
    '#size'          => 15,
    '#description'   => t('Use a prefix if you need to separate similar events (such as on different web servers). This prefix is added for watchdog calls (if enabled), as well as any calls via the built-in StatsD client. Do not include the underscore at the end of the prefix (e.g. use "myprefix" instead of "myprefix_"'),
    '#default_value' => variable_get('statsd_prefix', NULL),
  );

  return system_settings_form($form);

}


/**
 * Implementation of hook_watchdog()
 *
 */
function statsd_watchdog($entry) {

  if (!variable_get('statsd_watchdog', TRUE) ) {
    return;
  }

  module_load_include('inc', 'statsd', 'includes/statsd');
  $levels = watchdog_severity_levels();
  $prefix = ($prefix = variable_get('statsd_prefix', NULL) ) ? $prefix . '_' : '';
  $data   = array(
    sprintf('%swatchdog_type_%s', $prefix, $entry['type']),
    sprintf('%swatchdog_severity_%s', $prefix, $levels[$entry['severity']]),
  );

  StatsD::updateStats($data);

}